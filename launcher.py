#!/usr/bin/env python3
"""
SecurePassGen - Lanceur Universel
D√©tecte automatiquement le syst√®me d'exploitation et lance l'interface appropri√©e
"""

import sys
import platform
import subprocess
import tkinter as tk
from tkinter import messagebox
import webbrowser
import time
import threading
from pathlib import Path

class SecurePassGenLauncher:
    def __init__(self):
        self.system = platform.system().lower()
        self.python_executable = sys.executable
        self.base_dir = Path(__file__).parent
        
    def check_dependencies(self):
        """V√©rifie si les d√©pendances sont install√©es"""
        try:
            import flask
            return True
        except ImportError:
            return False
    
    def install_dependencies(self):
        """Installe les d√©pendances manquantes"""
        print("üì¶ Installation des d√©pendances...")
        try:
            subprocess.check_call([
                self.python_executable, "-m", "pip", "install", "-r", "requirements.txt"
            ])
            print("‚úÖ D√©pendances install√©es avec succ√®s!")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur lors de l'installation: {e}")
            return False
    
    def test_tkinter(self):
        """Teste si Tkinter fonctionne correctement"""
        try:
            # Test simple de cr√©ation de fen√™tre
            root = tk.Tk()
            root.withdraw()  # Cache la fen√™tre
            
            # Test sp√©cifique pour macOS
            if self.system == "darwin":
                try:
                    root.tk.call('tk', 'scaling')
                    root.destroy()
                    return True
                except:
                    root.destroy()
                    return False
            else:
                root.destroy()
                return True
                
        except Exception as e:
            print(f"‚ö†Ô∏è  Tkinter non disponible: {e}")
            return False
    
    def launch_web_app(self):
        """Lance l'application web Flask"""
        print("üåê Lancement de l'application web...")
        
        def run_flask():
            try:
                subprocess.run([
                    self.python_executable, 
                    str(self.base_dir / "web_app.py")
                ])
            except Exception as e:
                print(f"‚ùå Erreur lors du lancement web: {e}")
        
        # Lancer Flask dans un thread s√©par√©
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()
        
        # Attendre que le serveur d√©marre
        time.sleep(3)
        
        # Ouvrir le navigateur
        try:
            webbrowser.open("http://localhost:8080")
            print("üöÄ Application web lanc√©e sur http://localhost:8080")
            return True
        except Exception as e:
            print(f"‚ùå Erreur ouverture navigateur: {e}")
            return False
    
    def launch_desktop_app(self):
        """Lance l'application desktop Tkinter"""
        print("üñ•Ô∏è  Lancement de l'application desktop...")
        
        try:
            if self.system == "darwin":
                # Configuration sp√©ciale pour macOS
                env = {**subprocess.os.environ, 'TK_SILENCE_DEPRECATION': '1'}
                subprocess.run([
                    self.python_executable,
                    str(self.base_dir / "main.py")
                ], env=env)
            else:
                # Windows et Linux
                subprocess.run([
                    self.python_executable,
                    str(self.base_dir / "main.py")
                ])
            return True
        except Exception as e:
            print(f"‚ùå Erreur lors du lancement desktop: {e}")
            return False
    
    def show_launcher_gui(self):
        """Affiche une interface de s√©lection"""
        try:
            root = tk.Tk()
            root.title("SecurePassGen - Lanceur")
            root.geometry("400x300")
            root.resizable(False, False)
            
            # Centrer la fen√™tre
            root.update_idletasks()
            x = (root.winfo_screenwidth() // 2) - (400 // 2)
            y = (root.winfo_screenheight() // 2) - (300 // 2)
            root.geometry(f"400x300+{x}+{y}")
            
            # Interface
            tk.Label(root, text="üîê SecurePassGen", 
                    font=('Arial', 18, 'bold')).pack(pady=20)
            
            tk.Label(root, text="Choisissez votre mode de lancement:", 
                    font=('Arial', 12)).pack(pady=10)
            
            # Informations syst√®me
            system_info = f"Syst√®me: {platform.system()} {platform.release()}"
            tk.Label(root, text=system_info, 
                    font=('Arial', 10), fg='gray').pack(pady=5)
            
            # Boutons
            button_frame = tk.Frame(root)
            button_frame.pack(pady=20)
            
            def launch_web():
                root.destroy()
                self.launch_web_app()
            
            def launch_desktop():
                root.destroy()
                self.launch_desktop_app()
            
            tk.Button(button_frame, text="üåê Application Web\n(Recommand√©)", 
                     command=launch_web, width=15, height=3,
                     bg='#4CAF50', fg='white', font=('Arial', 10, 'bold')).pack(side=tk.LEFT, padx=10)
            
            tk.Button(button_frame, text="üñ•Ô∏è Application Desktop\n(Tkinter)", 
                     command=launch_desktop, width=15, height=3,
                     bg='#2196F3', fg='white', font=('Arial', 10, 'bold')).pack(side=tk.LEFT, padx=10)
            
            # Note
            note_text = "Note: L'application web fonctionne sur tous les syst√®mes\net offre la meilleure exp√©rience utilisateur."
            tk.Label(root, text=note_text, 
                    font=('Arial', 9), fg='gray', wraplength=350).pack(pady=20)
            
            root.mainloop()
            
        except Exception as e:
            print(f"‚ùå Erreur interface lanceur: {e}")
            # Fallback vers le mode console
            self.console_launcher()
    
    def console_launcher(self):
        """Lanceur en mode console"""
        print("\nüîê SecurePassGen - Lanceur")
        print("=" * 40)
        print(f"Syst√®me d√©tect√©: {platform.system()} {platform.release()}")
        print("\nModes disponibles:")
        print("1. üåê Application Web (Recommand√©)")
        print("2. üñ•Ô∏è  Application Desktop (Tkinter)")
        print("3. ‚ùå Quitter")
        
        while True:
            try:
                choice = input("\nVotre choix (1-3): ").strip()
                
                if choice == "1":
                    self.launch_web_app()
                    break
                elif choice == "2":
                    if self.test_tkinter():
                        self.launch_desktop_app()
                    else:
                        print("‚ùå Tkinter non disponible. Lancement de l'application web...")
                        self.launch_web_app()
                    break
                elif choice == "3":
                    print("üëã Au revoir!")
                    break
                else:
                    print("‚ùå Choix invalide. Veuillez entrer 1, 2 ou 3.")
                    
            except KeyboardInterrupt:
                print("\nüëã Au revoir!")
                break
            except Exception as e:
                print(f"‚ùå Erreur: {e}")
    
    def run(self):
        """Point d'entr√©e principal"""
        print("üöÄ SecurePassGen - Lanceur Universel")
        print(f"üì± Syst√®me: {platform.system()} {platform.release()}")
        
        # V√©rifier les d√©pendances
        if not self.check_dependencies():
            print("üì¶ D√©pendances manquantes d√©tect√©es.")
            if input("Installer automatiquement? (o/N): ").lower().startswith('o'):
                if not self.install_dependencies():
                    print("‚ùå Impossible d'installer les d√©pendances.")
                    return
            else:
                print("‚ùå D√©pendances requises non install√©es.")
                return
        
        # D√©tecter le meilleur mode de lancement
        if len(sys.argv) > 1:
            mode = sys.argv[1].lower()
            if mode == "web":
                self.launch_web_app()
            elif mode == "desktop":
                self.launch_desktop_app()
            elif mode == "console":
                self.console_launcher()
            else:
                print(f"‚ùå Mode inconnu: {mode}")
                print("Modes disponibles: web, desktop, console")
        else:
            # Mode automatique
            if self.test_tkinter():
                try:
                    self.show_launcher_gui()
                except:
                    self.console_launcher()
            else:
                print("‚ö†Ô∏è  Interface graphique non disponible.")
                self.console_launcher()

def main():
    """Fonction principale"""
    try:
        launcher = SecurePassGenLauncher()
        launcher.run()
    except KeyboardInterrupt:
        print("\nüëã Arr√™t demand√© par l'utilisateur.")
    except Exception as e:
        print(f"‚ùå Erreur fatale: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()